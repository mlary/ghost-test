//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export abstract class BaseClient {
  transformResult(_url: string, _response: Response, processor: (_response: Response) => Promise<void | any>) {
    const { status } = _response;
    if (status === INTERGTRATION_API_ERROR_CDOE) {
      _response
        .clone()
        .text()
        .then((_responseText) => {
          const result = JSON.parse(_responseText) as IntegrationApiErrorRespponse;
          document.dispatchEvent(
            new CustomEvent<IntegrationApiErrorRespponse>(INTERGTRATION_API_ERROR_NOTIFICATION, { detail: result }),
          );

          return _responseText;
        })
        .catch((error) => {
          console.error(error);
        });
    }

    return processor(_response);
  }
}

export interface ICompaniesClient {

    getById(id: number): Promise<CompanyDto>;

    delete(id: number): Promise<void>;

    getByRecruiterId(recruiterId: number | undefined): Promise<CompanyDto[]>;

    getAll(): Promise<CompanyDto[]>;

    update(request: UpdateCompanyCommand): Promise<CompanyDto>;

    create(request: CreateCompanyCommand): Promise<CompanyDto>;

    getByName(name: string | null | undefined): Promise<CompanyDto>;
}

export class CompaniesClient extends BaseClient implements ICompaniesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getById(id: number): Promise<CompanyDto> {
        let url_ = this.baseUrl + "/api/companies/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetById(_response));
        });
    }

    protected processGetById(response: Response): Promise<CompanyDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CompanyDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ErrorResponse;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyDto>(null as any);
    }

    delete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/companies/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDelete(_response));
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getByRecruiterId(recruiterId: number | undefined): Promise<CompanyDto[]> {
        let url_ = this.baseUrl + "/api/companies/by-recruiter?";
        if (recruiterId === null)
            throw new Error("The parameter 'recruiterId' cannot be null.");
        else if (recruiterId !== undefined)
            url_ += "RecruiterId=" + encodeURIComponent("" + recruiterId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetByRecruiterId(_response));
        });
    }

    protected processGetByRecruiterId(response: Response): Promise<CompanyDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CompanyDto[];
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ErrorResponse;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyDto[]>(null as any);
    }

    getAll(): Promise<CompanyDto[]> {
        let url_ = this.baseUrl + "/api/companies";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: Response): Promise<CompanyDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CompanyDto[];
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ErrorResponse;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyDto[]>(null as any);
    }

    update(request: UpdateCompanyCommand): Promise<CompanyDto> {
        let url_ = this.baseUrl + "/api/companies";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: Response): Promise<CompanyDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CompanyDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyDto>(null as any);
    }

    create(request: CreateCompanyCommand): Promise<CompanyDto> {
        let url_ = this.baseUrl + "/api/companies";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreate(_response));
        });
    }

    protected processCreate(response: Response): Promise<CompanyDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CompanyDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyDto>(null as any);
    }

    getByName(name: string | null | undefined): Promise<CompanyDto> {
        let url_ = this.baseUrl + "/api/companies/by-name?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetByName(_response));
        });
    }

    protected processGetByName(response: Response): Promise<CompanyDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CompanyDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ErrorResponse;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyDto>(null as any);
    }
}

export interface IRatesClient {

    create(command: CreateRateCommand): Promise<RateDto>;

    confirm(confirmationId: string): Promise<void>;

    getById(id: number): Promise<RateDto>;
}

export class RatesClient extends BaseClient implements IRatesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    create(command: CreateRateCommand): Promise<RateDto> {
        let url_ = this.baseUrl + "/api/rates";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreate(_response));
        });
    }

    protected processCreate(response: Response): Promise<RateDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as RateDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ErrorResponse;
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RateDto>(null as any);
    }

    confirm(confirmationId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/rates/{confirmationId}";
        if (confirmationId === undefined || confirmationId === null)
            throw new Error("The parameter 'confirmationId' must be defined.");
        url_ = url_.replace("{confirmationId}", encodeURIComponent("" + confirmationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PATCH",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processConfirm(_response));
        });
    }

    protected processConfirm(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getById(id: number): Promise<RateDto> {
        let url_ = this.baseUrl + "/api/rates/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetById(_response));
        });
    }

    protected processGetById(response: Response): Promise<RateDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as RateDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RateDto>(null as any);
    }
}

export interface IRecruitersClient {

    getAll(): Promise<RecruiterDto[]>;

    createOrUpdate(command: CreateOrUpdateRequiterCommand): Promise<RecruiterDto>;

    getById(id: number): Promise<RecruiterDto>;

    getByLinkedIn(linkedIn: string | null | undefined): Promise<RecruiterDto>;
}

export class RecruitersClient extends BaseClient implements IRecruitersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getAll(): Promise<RecruiterDto[]> {
        let url_ = this.baseUrl + "/api/recruiters";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: Response): Promise<RecruiterDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as RecruiterDto[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RecruiterDto[]>(null as any);
    }

    createOrUpdate(command: CreateOrUpdateRequiterCommand): Promise<RecruiterDto> {
        let url_ = this.baseUrl + "/api/recruiters";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateOrUpdate(_response));
        });
    }

    protected processCreateOrUpdate(response: Response): Promise<RecruiterDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as RecruiterDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RecruiterDto>(null as any);
    }

    getById(id: number): Promise<RecruiterDto> {
        let url_ = this.baseUrl + "/api/recruiters/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetById(_response));
        });
    }

    protected processGetById(response: Response): Promise<RecruiterDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as RecruiterDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RecruiterDto>(null as any);
    }

    getByLinkedIn(linkedIn: string | null | undefined): Promise<RecruiterDto> {
        let url_ = this.baseUrl + "/api/recruiters/linkedin?";
        if (linkedIn !== undefined && linkedIn !== null)
            url_ += "linkedIn=" + encodeURIComponent("" + linkedIn) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetByLinkedIn(_response));
        });
    }

    protected processGetByLinkedIn(response: Response): Promise<RecruiterDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as RecruiterDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RecruiterDto>(null as any);
    }
}

export interface CompanyDto {
    id: number;
    name: string;
    companyNormalizedName: string;
    linkedInUrl?: string | undefined;
}

export interface ErrorResponse {
    errorMessage?: string | undefined;
    errors?: { [key: string]: string[]; } | undefined;
}

export interface UpdateCompanyCommand {
    id: number;
    name: string;
    linkedInUrl: string;
}

export interface CreateCompanyCommand {
    name: string;
    linkedInUrl: string;
}

export interface BaseEntityDtoOfInteger {
    id: number;
}

export interface RateDto extends BaseEntityDtoOfInteger {
    email: string;
    recruitingType: number;
    companyId?: number | undefined;
    recruiterId: number;
    lateInMinutes: number;
    companyName?: string | undefined;
    commonRating: number;
    interviewRound: number;
    positionSeniorityLevel: PositionSeniorityLevels;
    visitedLinkedInProfile: AnswerTypes;
    cancelledInterview: boolean;
    interviewerListeningRate: number;
    interviewerInterestRate: number;
    comment: string;
    questionsRate: number;
    isConfirmed: boolean;
}

export enum PositionSeniorityLevels {
    EntryLevel = "EntryLevel",
    MidSeniorLevel = "MidSeniorLevel",
    SeniorLevel = "SeniorLevel",
    CLevel = "CLevel",
}

export enum AnswerTypes {
    Yes = "Yes",
    No = "No",
    Unknown = "Unknown",
}

export interface CreateRateCommand {
    email: string;
    recruitingType: number;
    companyId?: number | undefined;
    companyName?: string | undefined;
    recruiterId: number;
    commonRating: number;
    interviewRound: number;
    positionSeniorityLevel: PositionSeniorityLevels;
    lateInMinutes: number;
    cancelledInterview: boolean;
    interviewerListeningRate: number;
    interviewerInterestRate: number;
    comment: string;
    visitedLinkedInProfile: AnswerTypes;
    questionsRate: number;
}

export interface RecruiterDto extends BaseEntityDtoOfInteger {
    surname?: string | undefined;
    firstName?: string | undefined;
    linkedInUrl?: string | undefined;
    companyId?: number | undefined;
    createdAt?: string;
    modifiedAt?: string;
    company?: Company | undefined;
}

export interface BaseEntityOfInteger {
    id?: number;
}

export interface Company extends BaseEntityOfInteger {
    name?: string | undefined;
    companyNormalizedName?: string | undefined;
    linkedInUrl?: string | undefined;
    recruiters?: Recruiter[] | undefined;
    rates?: Rate[] | undefined;
}

export interface Recruiter extends BaseEntityOfInteger {
    surname?: string | undefined;
    firstName?: string | undefined;
    linkedInUrl?: string | undefined;
    companyId?: number | undefined;
    createdAt?: string;
    modifiedAt?: string;
    company?: Company | undefined;
    rates?: Rate[] | undefined;
}

export interface Rate extends BaseEntityOfInteger {
    email?: string | undefined;
    recruitingType?: number;
    companyId?: number | undefined;
    recruiterId?: number;
    interviewRound?: number;
    visitedLinkedInProfile?: number;
    positionSeniorityLevel?: number;
    lateInMinutes?: number;
    cancelledInterview?: boolean;
    interviewerListeningRate?: number;
    interviewerInterestRate?: number;
    comment?: string | undefined;
    companyName?: string | undefined;
    questionsRate?: number;
    commonRating?: number;
    isConfirmed?: boolean;
    confirmationId?: string;
    createdAt?: string;
    recruiter?: Recruiter | undefined;
    company?: Company | undefined;
}

export interface CreateOrUpdateRequiterCommand {
    linkedInUrl: string;
    surname: string;
    firstName: string;
    companyName?: string | undefined;
    companyId?: number | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new ApiException(message, status, response, headers, result);
}

const INTERGTRATION_API_ERROR_CDOE = 527;
export const INTERGTRATION_API_ERROR_NOTIFICATION = "ApiErrorNotification";
export type IntegrationApiErrorRespponse = {
  response: string;
  request: string;
  errorMessage: string;
};